# https://nedinthecloud.com/2021/12/08/github-actions-with-terraform/
name: Deploy Infrastructure With TF

on: 
  push: 
    branches:
      - main
  pull_request:
    branches: 
      - main
# on:
#   push:
#     branches:
#       - main

env:
  TF_LOG: INFO

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Set the working directory to where the tf files are
    defaults:
      run:
        shell: bash
        # working-directory: ./setups/dev
        working-directory: ./environments/dev

    steps:
      # Checkout the repository to the GHA runner
      - name: Checkout
        uses: actions/checkout@v2

      # Install the preferred version of the Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7

      # Initialize Terraform
      - name: Terraform Init
        id: init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
          # CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
        run: terraform init # -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP"

      - name: Terraform Plan
        id: plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color

      # Capture the output of the plan command (also available via the runner logs) and add to PR as a comment.
      # Handy because anyone reviewing the pull request doesn't need to dig out runner logs, they can juse expand the comment to 
      # see steps.
      - name: add-plan-comment
        id: comment
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        env:
          # Access to the output from the previous steps' stdout
          # Format and validation steps are blank because we dont have these defined.
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}  # This is a pre-existing secret available for the Runner to use.
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
          
            \`\`\`${process.env.PLAN}\`\`\`
          
            </details>
          
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # Merging a pull request is a push event on the target branch (e.g. `main`).
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve


    # - name: Terraform Init
    #   uses: hashicorp/terraform-github-actions/init@v0.4.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     TF_ACTION_WORKING_DIR: 'terraform'
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # - name: Terraform Validate
    #   uses: hashicorp/terraform-github-actions/validate@v0.3.7

    # - name: Terraform Apply
    #   uses: hashicorp/terraform-github-actions/apply@v0.4.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     TF_ACTION_WORKING_DIR: 'terraform'
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
